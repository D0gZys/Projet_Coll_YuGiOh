#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Importateur de fichiers CSV dans la base de donn√©es SQLite
"""

import csv
import os
import re
import json
import requests
from urllib.parse import unquote
from pathlib import Path
from typing import List, Dict, Tuple
from db_manager import DatabaseManager

class CSVImporter:
    def __init__(self, db_manager: DatabaseManager = None):
        """
        Initialise l'importateur CSV
        
        Args:
            db_manager: Instance du gestionnaire de base de donn√©es
        """
        self.db = db_manager or DatabaseManager()
    
    def charger_urls_sauvees(self) -> Dict[str, str]:
        """
        Charge les URLs sauvegard√©es depuis les fichiers JSON du convertisseur
        
        Returns:
            Dict[str, str]: Dictionnaire {code_serie: url}
        """
        urls = {}
        
        # Chemins possibles pour les fichiers d'URLs
        chemins_possibles = [
            # Fichier global dans la racine du projet
            Path(__file__).parent.parent / "urls_sauvees.json",
            # Fichier dans le convertisseur
            Path(__file__).parent.parent / "convertisseur" / "urls_sauvees.json",
            # Fichier local dans le r√©pertoire courant
            Path("urls_sauvees.json")
        ]
        
        for chemin in chemins_possibles:
            try:
                if chemin.exists():
                    with open(chemin, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        urls.update(data)
                    print(f"üìÇ URLs charg√©es depuis : {chemin}")
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du chargement de {chemin} : {e}")
                continue
        
        if urls:
            print(f"üîó {len(urls)} URLs de s√©ries charg√©es")
        else:
            print("‚ö†Ô∏è Aucune URL de s√©rie trouv√©e")
        
        return urls
    
    def extraire_nom_serie_depuis_url(self, url: str) -> str:
        """
        Extrait le nom de la s√©rie depuis une URL Yugipedia
        
        Args:
            url (str): URL Yugipedia de la s√©rie
            
        Returns:
            str: Nom de la s√©rie extrait de l'URL, ou nom g√©n√©rique si √©chec
        """
        if not url or not isinstance(url, str):
            return None
        
        try:
            # Extraire le nom depuis l'URL
            # Ex: "Set_Card_Lists:Battles_of_Legend:_Monster_Mayhem_(TCG-FR)"
            patterns = [
                r'Set_Card_Lists:([^(]+?)_\(TCG-FR\)',           # Pattern principal
                r'Set_Card_Lists:([^(]+?)_\(TCG',                # Sans -FR
                r'Set_Card_Lists:([^/]+?)(?:\?|$)',             # Pattern alternatif
                r'wiki/([^/]+?)(?:\?|$)',                        # Pattern g√©n√©ral wiki
            ]
            
            for pattern in patterns:
                match = re.search(pattern, url)
                if match:
                    nom_brut = match.group(1)
                    
                    # D√©coder les caract√®res URL d'abord
                    nom_decode = unquote(nom_brut)
                    
                    # Nettoyer le nom
                    nom_propre = nom_decode.replace('_', ' ')
                    nom_propre = nom_propre.replace(':', ': ')
                    nom_propre = nom_propre.strip()
                    
                    # Corrections sp√©cifiques
                    nom_propre = nom_propre.replace('25th Anniversary Tin  Dueling Heroes', '25th Anniversary Tin: Dueling Heroes')
                    
                    return nom_propre
        
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'extraction du nom depuis l'URL : {e}")
        
        return None
    
    def detecter_info_serie(self, nom_fichier: str, premier_code: str = None) -> Tuple[str, str]:
        """
        D√©tecte automatiquement les informations de s√©rie depuis le nom de fichier
        ou le premier code de carte
        
        Args:
            nom_fichier (str): Nom du fichier CSV
            premier_code (str): Premier code de carte trouv√©
        
        Returns:
            Tuple[str, str]: (code_serie, nom_serie_estim√©)
        """
        # Extraire depuis le nom de fichier
        nom_base = Path(nom_fichier).stem
        
        # Priorit√© 1: Extraire depuis le premier code de carte (plus fiable)
        if premier_code:
            match_code = re.match(r'^([A-Z0-9]+)-FR', premier_code)
            code_serie = match_code.group(1) if match_code else "UNKNOWN"
        else:
            # Priorit√© 2: Essayer d'extraire le code depuis le nom de fichier
            code_depuis_nom = re.match(r'^([A-Z0-9]+)', nom_base.upper())
            if code_depuis_nom:
                code_serie = code_depuis_nom.group(1)
            else:
                code_serie = "UNKNOWN"
        
        # Essayer de r√©cup√©rer le nom depuis l'URL correspondante
        nom_serie = f"S√©rie {code_serie}"  # Nom par d√©faut
        
        # Charger les URLs pour r√©cup√©rer le nom depuis l'URL
        try:
            urls_sauvees = self.charger_urls_sauvees()
            url_serie = urls_sauvees.get(code_serie)
            
            if url_serie:
                nom_extrait = self.extraire_nom_serie_depuis_url(url_serie)
                if nom_extrait:
                    nom_serie = nom_extrait
                    print(f"üìù Nom extrait de l'URL pour {code_serie} : {nom_serie}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'extraction du nom depuis l'URL : {e}")
        
        return code_serie, nom_serie
    
    def valider_format_csv(self, fichier_csv: str) -> Tuple[bool, str]:
        """
        Valide que le fichier CSV a le bon format
        
        Returns:
            Tuple[bool, str]: (est_valide, message)
        """
        try:
            with open(fichier_csv, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                
                # V√©rifier les colonnes requises
                colonnes_requises = ['Code_Serie', 'Nom_Carte', 'Raret√©', 'Num√©ro_Carte']
                colonnes_presentes = reader.fieldnames
                
                if not colonnes_presentes:
                    return False, "Fichier CSV vide ou sans en-t√™tes"
                
                colonnes_manquantes = [col for col in colonnes_requises if col not in colonnes_presentes]
                if colonnes_manquantes:
                    return False, f"Colonnes manquantes : {', '.join(colonnes_manquantes)}"
                
                # Tester la premi√®re ligne pour v√©rifier le format
                premiere_ligne = next(reader, None)
                if not premiere_ligne:
                    return False, "Fichier CSV sans donn√©es"
                
                # V√©rifier que les champs ne sont pas vides
                for colonne in colonnes_requises:
                    if not premiere_ligne.get(colonne, '').strip():
                        return False, f"Premi√®re ligne invalide : colonne '{colonne}' vide"
                
                return True, "Format CSV valide"
                
        except Exception as e:
            return False, f"Erreur lors de la validation : {e}"
    
    def importer_csv(self, fichier_csv: str, auto_detect: bool = True, 
                    code_serie_force: str = None, nom_serie_force: str = None,
                    url_source: str = None) -> Dict[str, int]:
        """
        Importe un fichier CSV dans la base de donn√©es
        
        Args:
            fichier_csv (str): Chemin vers le fichier CSV
            auto_detect (bool): D√©tection automatique des infos de s√©rie
            code_serie_force (str): Forcer un code de s√©rie sp√©cifique
            nom_serie_force (str): Forcer un nom de s√©rie sp√©cifique
            url_source (str): URL source Yugipedia
        
        Returns:
            Dict[str, int]: Statistiques d'import (cartes ajout√©es, liens cr√©√©s, etc.)
        """
        print(f"üì• Import du fichier : {fichier_csv}")
        
        # Valider le format
        valide, message = self.valider_format_csv(fichier_csv)
        if not valide:
            raise ValueError(f"Format CSV invalide : {message}")
        
        print(f"‚úÖ {message}")
        
        stats = {
            'cartes_ajoutees': 0,
            'liens_crees': 0,
            'cartes_existantes': 0,
            'erreurs': 0
        }
        
        # Lire le CSV
        with open(fichier_csv, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            lignes = list(reader)
        
        if not lignes:
            raise ValueError("Fichier CSV vide")
        
        # D√©tecter ou utiliser les informations de s√©rie
        if auto_detect and not code_serie_force:
            premier_numero = lignes[0]['Num√©ro_Carte']
            code_serie, nom_serie = self.detecter_info_serie(fichier_csv, premier_numero)
        else:
            code_serie = code_serie_force or "UNKNOWN"
            nom_serie = nom_serie_force or f"S√©rie {code_serie}"
        
        print(f"üìä S√©rie d√©tect√©e : {code_serie} - {nom_serie}")
        
        # Charger les URLs sauvegard√©es et r√©cup√©rer l'URL pour cette s√©rie
        if not url_source:  # Si pas d'URL fournie en param√®tre
            urls_sauvees = self.charger_urls_sauvees()
            url_source = urls_sauvees.get(code_serie)
            if url_source:
                print(f"üîó URL trouv√©e pour {code_serie} : {url_source}")
        
        # Ajouter/r√©cup√©rer la s√©rie
        try:
            serie_id = self.db.ajouter_serie(code_serie, nom_serie, url_source)
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ajout de s√©rie : {e}")
            return stats
        
        # Traiter chaque ligne
        cartes_traitees = set()  # Pour √©viter les doublons de cartes
        
        for i, ligne in enumerate(lignes, 1):
            try:
                numero_carte = ligne['Num√©ro_Carte'].strip()
                nom_carte = ligne['Nom_Carte'].strip()
                nom_rarete = ligne['Raret√©'].strip()
                
                if not all([numero_carte, nom_carte, nom_rarete]):
                    print(f"‚ö†Ô∏è  Ligne {i} : donn√©es manquantes, ignor√©e")
                    continue
                
                # Ajouter la carte si pas encore trait√©e
                if numero_carte not in cartes_traitees:
                    carte_id = self.db.ajouter_carte(numero_carte, nom_carte, serie_id)
                    if carte_id:
                        stats['cartes_ajoutees'] += 1
                        cartes_traitees.add(numero_carte)
                    else:
                        stats['cartes_existantes'] += 1
                        cartes_traitees.add(numero_carte)
                
                # R√©cup√©rer l'ID de la carte
                carte_id = self.db.get_connection().execute(
                    'SELECT id FROM cartes WHERE numero_carte = ?', (numero_carte,)
                ).fetchone()
                
                if not carte_id:
                    print(f"‚ùå Ligne {i} : impossible de trouver la carte {numero_carte}")
                    stats['erreurs'] += 1
                    continue
                
                carte_id = carte_id[0]
                
                # R√©cup√©rer/cr√©er l'ID de la raret√©
                rarete_id = self.db.get_rarete_id(nom_rarete)
                
                # Cr√©er le lien carte-raret√©
                if self.db.lier_carte_rarete(carte_id, rarete_id):
                    stats['liens_crees'] += 1
                
            except Exception as e:
                print(f"‚ùå Erreur ligne {i} : {e}")
                stats['erreurs'] += 1
                continue
        
        # Afficher le r√©sum√©
        print(f"\nüìä Import termin√© pour {code_serie} :")
        print(f"  ‚ûï Cartes ajout√©es : {stats['cartes_ajoutees']}")
        print(f"  üîó Liens carte-raret√© cr√©√©s : {stats['liens_crees']}")
        print(f"  ‚Üª  Cartes existantes : {stats['cartes_existantes']}")
        print(f"  ‚ùå Erreurs : {stats['erreurs']}")
        
        return stats
    
    def importer_dossier(self, dossier_csv: str = "convertisseur/temp") -> Dict[str, Dict]:
        """
        Importe tous les fichiers CSV d'un dossier
        
        Args:
            dossier_csv (str): Chemin vers le dossier contenant les CSV
        
        Returns:
            Dict[str, Dict]: Statistiques d'import par fichier
        """
        if not os.path.exists(dossier_csv):
            print(f"‚ùå Dossier non trouv√© : {dossier_csv}")
            return {}
        
        fichiers_csv = [f for f in os.listdir(dossier_csv) if f.endswith('.csv')]
        
        if not fichiers_csv:
            print(f"‚ùå Aucun fichier CSV trouv√© dans {dossier_csv}")
            return {}
        
        print(f"üìÅ Import de {len(fichiers_csv)} fichiers CSV...")
        
        resultats = {}
        fichiers_a_supprimer = []
        
        for fichier in fichiers_csv:
            chemin_complet = os.path.join(dossier_csv, fichier)
            try:
                stats = self.importer_csv(chemin_complet)
                resultats[fichier] = stats
                # Marquer le fichier pour suppression si l'import a r√©ussi
                if stats.get('cartes_ajoutees', 0) > 0 or stats.get('liens_crees', 0) > 0:
                    fichiers_a_supprimer.append(chemin_complet)
                    stats['fichier_supprime'] = True
            except Exception as e:
                print(f"‚ùå √âchec import {fichier} : {e}")
                resultats[fichier] = {'erreur': str(e)}
        
        # Supprimer les fichiers import√©s avec succ√®s
        for chemin_fichier in fichiers_a_supprimer:
            try:
                os.remove(chemin_fichier)
                nom_fichier = os.path.basename(chemin_fichier)
                print(f"üóëÔ∏è Fichier supprim√© : {nom_fichier}")
            except Exception as e:
                print(f"‚ö†Ô∏è Impossible de supprimer {nom_fichier} : {e}")
        
        return resultats

# Test et utilitaires
def tester_import():
    """Fonction de test de l'importateur"""
    print("üß™ Test de l'importateur CSV")
    
    # Cr√©er une instance de test
    importer = CSVImporter(DatabaseManager("database/test_collection.db"))
    
    # Test avec un fichier factice (si disponible)
    test_files = ["test_RA02.csv", "convertisseur/temp/*.csv"]
    
    for pattern in test_files:
        if '*' in pattern:
            import glob
            files = glob.glob(pattern)
            for file in files:
                if os.path.exists(file):
                    print(f"üìÑ Test avec : {file}")
                    try:
                        stats = importer.importer_csv(file)
                        print(f"‚úÖ Import r√©ussi : {stats}")
                    except Exception as e:
                        print(f"‚ùå Erreur : {e}")
        else:
            if os.path.exists(pattern):
                print(f"üìÑ Test avec : {pattern}")
                try:
                    stats = importer.importer_csv(pattern)
                    print(f"‚úÖ Import r√©ussi : {stats}")
                except Exception as e:
                    print(f"‚ùå Erreur : {e}")
    
    print("‚úÖ Test termin√©")

if __name__ == "__main__":
    tester_import()